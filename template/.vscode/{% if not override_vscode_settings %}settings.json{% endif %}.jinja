{
  // * -------------------------------------------------------------------------- * //
  // * PROJECT-SPECIFIC * //

  //! Extension: Pylance
  //* Pylance settings aren't very discoverable.
  //* https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance
  "python.languageServer": "Pylance",
  "python.analysis.diagnosticMode": "workspace",
  "python.analysis.indexing": true,
  "python.analysis.autoSearchPaths": false, // See "include" and "extrapaths" in pyrightconfig.json
  "python.analysis.typeCheckingMode": "off", // See "useLibraryCodeForTypes" in pyrightconfig.json

  //! Extension: GitHub Actions
  "github-actions.workflows.pinned.workflows": [".github/workflows/main.yml"],

  //! Linting

  //* flake8
  "python.linting.enabled": true,
  "python.linting.flake8Enabled": true,
  "python.linting.flake8Args": ["--config", ".flake8"],

  //* isort
  "python.sortImports.args": ["--profile", "black"],

  //* pytest
  "python.testing.unittestEnabled": false,
  "python.testing.pytestEnabled": true,

  //* markdownlint
  "markdownlint.config": {
    "first-line-heading": false
  },

  "shellLauncher.shells.windows": [
    {
      //* Launches IPython in the virtual environment. Lets you try things out in without having to fire up an entire Jupyter notebook.
      //*
      //* Use alongside the following keybind in your "keybindings.json".
      //*
      // //! Extension: Shell Launcher
      // {
      //   "key": "ctrl+alt+1",
      //   "command": "shellLauncher.launch"
      // },
      //*
      "label": "IPython (.venv)",
      "shell": "pwsh.exe",
      "args": ["-NoExit", "-Command", "python", "-m", "IPython"]
    }
  ],

  // * -------------------------------------------------------------------------- * //
  // * GENERAL * //

  //! Line-width related options

  //* Soft wrap settings

  //? Set wrapping column
  "editor.wordWrapColumn": 88,
  "editor.rulers": [88],

  //* Markdown editor moves jarringly when this is "true"
  "markdown.preview.scrollEditorWithPreview": false,
  //* Soft wrap in *.md, *.jsonc (like settings.json), and *.rst
  "[markdown]": {
    //* Roughly matches the width of GitHub Markdown
    "editor.defaultFormatter": "DavidAnson.vscode-markdownlint",
    "editor.wordWrap": "wordWrapColumn",
    "editor.wordWrapColumn": 124,
    "editor.rulers": [124],
    "rewrap.autoWrap.enabled": false
  },

  //! Built-in

  //* Enable native bracket pair colorization
  "editor.bracketPairColorization.enabled": true,
  "editor.guides.bracketPairs": true,

  //* Format on save. Adjust CTRL+[SHIFT/ALT]+S in "keybindings.json" as well
  "editor.formatOnSave": true,

  //* Experimental File Nesting
  "explorer.sortOrder": "foldersNestsFiles",
  "explorer.experimental.fileNesting.enabled": true,
  "explorer.experimental.fileNesting.expand": false,
  "explorer.experimental.fileNesting.operateAsGroup": false,
  "explorer.experimental.fileNesting.patterns": {
    "*.ts": "${capture}.js",
    "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
    "*.jsx": "${capture}.js",
    "*.tsx": "${capture}.ts",
    "tsconfig.json": "tsconfig.*.json",
    "package.json": "package-lock.json, yarn.lock",
    ".nest_tooling": "setup.ps1, update.ps1, pythonrc.py, .copier-answers.yml, .coveragerc, .env, .flake8, .gitattributes, package.json, pyrightconfig.json, pytest.ini, .pytest_cache",
    ".nest_markdown": "*.md, LICENSE"
  },

  //* Custom file associations
  "files.associations": {
    ".coveragerc": "ini",
    ".env": "dotenv",
    ".pylintrc": "ini",
    "pyrightconfig.json": "jsonc",
    "*requirements*.txt": "pip-requirements",
    ".nest_*": "plaintext"
  },

  //* Enforce whitespace and newlines.
  //? Automatically enforce whitespace conventions.
  "files.insertFinalNewline": true,
  "files.trimTrailingWhitespace": true,
  "files.trimFinalNewlines": true,

  //* Periodically fetch changes to tracked repo. Don't confirm on push/pull.
  "git.autofetch": true,
  "git.confirmSync": false,

  //* Don't validate the body of a commit. Assume people can wrap it in their IDE.
  "git.inputValidationSubjectLength": 88,
  "git.inputValidationLength": 1e100,

  //! Extension: Better Jinja
  "[jinja-md]": {
    //* Roughly matches the width of GitHub Markdown
    "editor.wordWrap": "wordWrapColumn",
    "editor.wordWrapColumn": 124,
    "editor.rulers": [124]
  },

  //* Use Prettier in JSON files
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  //* Use Prettier and word wrap in commented JSON files
  "[jsonc]": {
    "editor.wordWrap": "wordWrapColumn",
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  //* Word wrap in RST files
  "[restructuredtext]": {
    "editor.wordWrap": "wordWrapColumn"
  },

  //* Word wrap in TXT files
  "[plaintext]": {
    "editor.wordWrap": "wordWrapColumn"
  },

  //* Word wrap in TOML files
  "[toml]": {
    "editor.wordWrap": "wordWrapColumn",
    "editor.defaultFormatter": "tamasfe.even-better-toml"
  },

  //* Indent with tabs in TSV files
  "[tsv]": {
    "editor.insertSpaces": false
  },

  //* Formatting configuration
  "python.formatting.provider": "black",
  "rewrap.wrappingColumn": 88,
  "rewrap.wholeComment": false,

  //! Extension: YAML
  "yaml.format.printWidth": 88,
  "[yaml]": {
    "editor.defaultFormatter": "redhat.vscode-yaml",
    "editor.wordWrap": "wordWrapColumn"
  },
  "[jinja-yaml]": {
    "editor.wordWrap": "wordWrapColumn"
  },

  //! Extension: Even Better TOML
  "evenBetterToml.formatter.columnWidth": 88,
  "[jinja-toml]": {
    "editor.wordWrap": "wordWrapColumn"
  },

  //! Extension: reStructuredText
  //* Disable language server so that "snooty" isn't required in every .venv
  "restructuredtext.languageServer.disabled": true,
  "restructuredtext.preview.scrollEditorWithPreview": false
}
